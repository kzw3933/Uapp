package com.example.uapp.thr;

/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-04-17")
public class PostInfo implements org.apache.thrift.TBase<PostInfo, PostInfo._Fields>, java.io.Serializable, Cloneable, Comparable<PostInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PostInfo");

  private static final org.apache.thrift.protocol.TField FOR_LOST_ITEM_FIELD_DESC = new org.apache.thrift.protocol.TField("for_lost_item", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ITEM_IMAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("item_image", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ITEM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("item_type", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ITEM_POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("item_position", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ITEM_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("item_desc", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new PostInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new PostInfoTupleSchemeFactory();

  public boolean for_lost_item; // required
  public @org.apache.thrift.annotation.Nullable String content; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer item_image; // required
  public @org.apache.thrift.annotation.Nullable String item_type; // required
  public @org.apache.thrift.annotation.Nullable String item_position; // required
  public @org.apache.thrift.annotation.Nullable String item_desc; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FOR_LOST_ITEM((short)1, "for_lost_item"),
    CONTENT((short)2, "content"),
    ITEM_IMAGE((short)3, "item_image"),
    ITEM_TYPE((short)4, "item_type"),
    ITEM_POSITION((short)5, "item_position"),
    ITEM_DESC((short)6, "item_desc");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FOR_LOST_ITEM
          return FOR_LOST_ITEM;
        case 2: // CONTENT
          return CONTENT;
        case 3: // ITEM_IMAGE
          return ITEM_IMAGE;
        case 4: // ITEM_TYPE
          return ITEM_TYPE;
        case 5: // ITEM_POSITION
          return ITEM_POSITION;
        case 6: // ITEM_DESC
          return ITEM_DESC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FOR_LOST_ITEM_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ITEM_DESC};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FOR_LOST_ITEM, new org.apache.thrift.meta_data.FieldMetaData("for_lost_item", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ITEM_IMAGE, new org.apache.thrift.meta_data.FieldMetaData("item_image", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.ITEM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("item_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ITEM_POSITION, new org.apache.thrift.meta_data.FieldMetaData("item_position", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ITEM_DESC, new org.apache.thrift.meta_data.FieldMetaData("item_desc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PostInfo.class, metaDataMap);
  }

  public PostInfo() {
  }

  public PostInfo(
    boolean for_lost_item,
    String content,
    java.nio.ByteBuffer item_image,
    String item_type,
    String item_position)
  {
    this();
    this.for_lost_item = for_lost_item;
    setFor_lost_itemIsSet(true);
    this.content = content;
    this.item_image = org.apache.thrift.TBaseHelper.copyBinary(item_image);
    this.item_type = item_type;
    this.item_position = item_position;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PostInfo(PostInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.for_lost_item = other.for_lost_item;
    if (other.isSetContent()) {
      this.content = other.content;
    }
    if (other.isSetItem_image()) {
      this.item_image = org.apache.thrift.TBaseHelper.copyBinary(other.item_image);
    }
    if (other.isSetItem_type()) {
      this.item_type = other.item_type;
    }
    if (other.isSetItem_position()) {
      this.item_position = other.item_position;
    }
    if (other.isSetItem_desc()) {
      this.item_desc = other.item_desc;
    }
  }

  @Override
  public PostInfo deepCopy() {
    return new PostInfo(this);
  }

  @Override
  public void clear() {
    setFor_lost_itemIsSet(false);
    this.for_lost_item = false;
    this.content = null;
    this.item_image = null;
    this.item_type = null;
    this.item_position = null;
    this.item_desc = null;
  }

  public boolean isFor_lost_item() {
    return this.for_lost_item;
  }

  public PostInfo setFor_lost_item(boolean for_lost_item) {
    this.for_lost_item = for_lost_item;
    setFor_lost_itemIsSet(true);
    return this;
  }

  public void unsetFor_lost_item() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FOR_LOST_ITEM_ISSET_ID);
  }

  /** Returns true if field for_lost_item is set (has been assigned a value) and false otherwise */
  public boolean isSetFor_lost_item() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FOR_LOST_ITEM_ISSET_ID);
  }

  public void setFor_lost_itemIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FOR_LOST_ITEM_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public String getContent() {
    return this.content;
  }

  public PostInfo setContent(@org.apache.thrift.annotation.Nullable String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public byte[] getItem_image() {
    setItem_image(org.apache.thrift.TBaseHelper.rightSize(item_image));
    return item_image == null ? null : item_image.array();
  }

  public java.nio.ByteBuffer bufferForItem_image() {
    return org.apache.thrift.TBaseHelper.copyBinary(item_image);
  }

  public PostInfo setItem_image(byte[] item_image) {
    this.item_image = item_image == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(item_image.clone());
    return this;
  }

  public PostInfo setItem_image(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer item_image) {
    this.item_image = org.apache.thrift.TBaseHelper.copyBinary(item_image);
    return this;
  }

  public void unsetItem_image() {
    this.item_image = null;
  }

  /** Returns true if field item_image is set (has been assigned a value) and false otherwise */
  public boolean isSetItem_image() {
    return this.item_image != null;
  }

  public void setItem_imageIsSet(boolean value) {
    if (!value) {
      this.item_image = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getItem_type() {
    return this.item_type;
  }

  public PostInfo setItem_type(@org.apache.thrift.annotation.Nullable String item_type) {
    this.item_type = item_type;
    return this;
  }

  public void unsetItem_type() {
    this.item_type = null;
  }

  /** Returns true if field item_type is set (has been assigned a value) and false otherwise */
  public boolean isSetItem_type() {
    return this.item_type != null;
  }

  public void setItem_typeIsSet(boolean value) {
    if (!value) {
      this.item_type = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getItem_position() {
    return this.item_position;
  }

  public PostInfo setItem_position(@org.apache.thrift.annotation.Nullable String item_position) {
    this.item_position = item_position;
    return this;
  }

  public void unsetItem_position() {
    this.item_position = null;
  }

  /** Returns true if field item_position is set (has been assigned a value) and false otherwise */
  public boolean isSetItem_position() {
    return this.item_position != null;
  }

  public void setItem_positionIsSet(boolean value) {
    if (!value) {
      this.item_position = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getItem_desc() {
    return this.item_desc;
  }

  public PostInfo setItem_desc(@org.apache.thrift.annotation.Nullable String item_desc) {
    this.item_desc = item_desc;
    return this;
  }

  public void unsetItem_desc() {
    this.item_desc = null;
  }

  /** Returns true if field item_desc is set (has been assigned a value) and false otherwise */
  public boolean isSetItem_desc() {
    return this.item_desc != null;
  }

  public void setItem_descIsSet(boolean value) {
    if (!value) {
      this.item_desc = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case FOR_LOST_ITEM:
      if (value == null) {
        unsetFor_lost_item();
      } else {
        setFor_lost_item((Boolean)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case ITEM_IMAGE:
      if (value == null) {
        unsetItem_image();
      } else {
        if (value instanceof byte[]) {
          setItem_image((byte[])value);
        } else {
          setItem_image((java.nio.ByteBuffer)value);
        }
      }
      break;

    case ITEM_TYPE:
      if (value == null) {
        unsetItem_type();
      } else {
        setItem_type((String)value);
      }
      break;

    case ITEM_POSITION:
      if (value == null) {
        unsetItem_position();
      } else {
        setItem_position((String)value);
      }
      break;

    case ITEM_DESC:
      if (value == null) {
        unsetItem_desc();
      } else {
        setItem_desc((String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FOR_LOST_ITEM:
      return isFor_lost_item();

    case CONTENT:
      return getContent();

    case ITEM_IMAGE:
      return getItem_image();

    case ITEM_TYPE:
      return getItem_type();

    case ITEM_POSITION:
      return getItem_position();

    case ITEM_DESC:
      return getItem_desc();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FOR_LOST_ITEM:
      return isSetFor_lost_item();
    case CONTENT:
      return isSetContent();
    case ITEM_IMAGE:
      return isSetItem_image();
    case ITEM_TYPE:
      return isSetItem_type();
    case ITEM_POSITION:
      return isSetItem_position();
    case ITEM_DESC:
      return isSetItem_desc();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that instanceof PostInfo)
      return this.equals((PostInfo)that);
    return false;
  }

  public boolean equals(PostInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_for_lost_item = true;
    boolean that_present_for_lost_item = true;
    if (this_present_for_lost_item || that_present_for_lost_item) {
      if (!(this_present_for_lost_item && that_present_for_lost_item))
        return false;
      if (this.for_lost_item != that.for_lost_item)
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_item_image = true && this.isSetItem_image();
    boolean that_present_item_image = true && that.isSetItem_image();
    if (this_present_item_image || that_present_item_image) {
      if (!(this_present_item_image && that_present_item_image))
        return false;
      if (!this.item_image.equals(that.item_image))
        return false;
    }

    boolean this_present_item_type = true && this.isSetItem_type();
    boolean that_present_item_type = true && that.isSetItem_type();
    if (this_present_item_type || that_present_item_type) {
      if (!(this_present_item_type && that_present_item_type))
        return false;
      if (!this.item_type.equals(that.item_type))
        return false;
    }

    boolean this_present_item_position = true && this.isSetItem_position();
    boolean that_present_item_position = true && that.isSetItem_position();
    if (this_present_item_position || that_present_item_position) {
      if (!(this_present_item_position && that_present_item_position))
        return false;
      if (!this.item_position.equals(that.item_position))
        return false;
    }

    boolean this_present_item_desc = true && this.isSetItem_desc();
    boolean that_present_item_desc = true && that.isSetItem_desc();
    if (this_present_item_desc || that_present_item_desc) {
      if (!(this_present_item_desc && that_present_item_desc))
        return false;
      if (!this.item_desc.equals(that.item_desc))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((for_lost_item) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetContent()) ? 131071 : 524287);
    if (isSetContent())
      hashCode = hashCode * 8191 + content.hashCode();

    hashCode = hashCode * 8191 + ((isSetItem_image()) ? 131071 : 524287);
    if (isSetItem_image())
      hashCode = hashCode * 8191 + item_image.hashCode();

    hashCode = hashCode * 8191 + ((isSetItem_type()) ? 131071 : 524287);
    if (isSetItem_type())
      hashCode = hashCode * 8191 + item_type.hashCode();

    hashCode = hashCode * 8191 + ((isSetItem_position()) ? 131071 : 524287);
    if (isSetItem_position())
      hashCode = hashCode * 8191 + item_position.hashCode();

    hashCode = hashCode * 8191 + ((isSetItem_desc()) ? 131071 : 524287);
    if (isSetItem_desc())
      hashCode = hashCode * 8191 + item_desc.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(PostInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.compare(isSetFor_lost_item(), other.isSetFor_lost_item());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFor_lost_item()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.for_lost_item, other.for_lost_item);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetContent(), other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetItem_image(), other.isSetItem_image());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItem_image()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_image, other.item_image);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetItem_type(), other.isSetItem_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItem_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_type, other.item_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetItem_position(), other.isSetItem_position());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItem_position()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_position, other.item_position);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetItem_desc(), other.isSetItem_desc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItem_desc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_desc, other.item_desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PostInfo(");
    boolean first = true;

    sb.append("for_lost_item:");
    sb.append(this.for_lost_item);
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("item_image:");
    if (this.item_image == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.item_image, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("item_type:");
    if (this.item_type == null) {
      sb.append("null");
    } else {
      sb.append(this.item_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("item_position:");
    if (this.item_position == null) {
      sb.append("null");
    } else {
      sb.append(this.item_position);
    }
    first = false;
    if (isSetItem_desc()) {
      if (!first) sb.append(", ");
      sb.append("item_desc:");
      if (this.item_desc == null) {
        sb.append("null");
      } else {
        sb.append(this.item_desc);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PostInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public PostInfoStandardScheme getScheme() {
      return new PostInfoStandardScheme();
    }
  }

  private static class PostInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<PostInfo> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, PostInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FOR_LOST_ITEM
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.for_lost_item = iprot.readBool();
              struct.setFor_lost_itemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ITEM_IMAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.item_image = iprot.readBinary();
              struct.setItem_imageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ITEM_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.item_type = iprot.readString();
              struct.setItem_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ITEM_POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.item_position = iprot.readString();
              struct.setItem_positionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ITEM_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.item_desc = iprot.readString();
              struct.setItem_descIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, PostInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(FOR_LOST_ITEM_FIELD_DESC);
      oprot.writeBool(struct.for_lost_item);
      oprot.writeFieldEnd();
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeString(struct.content);
        oprot.writeFieldEnd();
      }
      if (struct.item_image != null) {
        oprot.writeFieldBegin(ITEM_IMAGE_FIELD_DESC);
        oprot.writeBinary(struct.item_image);
        oprot.writeFieldEnd();
      }
      if (struct.item_type != null) {
        oprot.writeFieldBegin(ITEM_TYPE_FIELD_DESC);
        oprot.writeString(struct.item_type);
        oprot.writeFieldEnd();
      }
      if (struct.item_position != null) {
        oprot.writeFieldBegin(ITEM_POSITION_FIELD_DESC);
        oprot.writeString(struct.item_position);
        oprot.writeFieldEnd();
      }
      if (struct.item_desc != null) {
        if (struct.isSetItem_desc()) {
          oprot.writeFieldBegin(ITEM_DESC_FIELD_DESC);
          oprot.writeString(struct.item_desc);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PostInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public PostInfoTupleScheme getScheme() {
      return new PostInfoTupleScheme();
    }
  }

  private static class PostInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<PostInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PostInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetFor_lost_item()) {
        optionals.set(0);
      }
      if (struct.isSetContent()) {
        optionals.set(1);
      }
      if (struct.isSetItem_image()) {
        optionals.set(2);
      }
      if (struct.isSetItem_type()) {
        optionals.set(3);
      }
      if (struct.isSetItem_position()) {
        optionals.set(4);
      }
      if (struct.isSetItem_desc()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetFor_lost_item()) {
        oprot.writeBool(struct.for_lost_item);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetItem_image()) {
        oprot.writeBinary(struct.item_image);
      }
      if (struct.isSetItem_type()) {
        oprot.writeString(struct.item_type);
      }
      if (struct.isSetItem_position()) {
        oprot.writeString(struct.item_position);
      }
      if (struct.isSetItem_desc()) {
        oprot.writeString(struct.item_desc);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PostInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.for_lost_item = iprot.readBool();
        struct.setFor_lost_itemIsSet(true);
      }
      if (incoming.get(1)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(2)) {
        struct.item_image = iprot.readBinary();
        struct.setItem_imageIsSet(true);
      }
      if (incoming.get(3)) {
        struct.item_type = iprot.readString();
        struct.setItem_typeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.item_position = iprot.readString();
        struct.setItem_positionIsSet(true);
      }
      if (incoming.get(5)) {
        struct.item_desc = iprot.readString();
        struct.setItem_descIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

