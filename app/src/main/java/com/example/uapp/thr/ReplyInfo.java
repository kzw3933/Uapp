package com.example.uapp.thr;

/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-05-06")
public class ReplyInfo implements org.apache.thrift.TBase<ReplyInfo, ReplyInfo._Fields>, java.io.Serializable, Cloneable, Comparable<ReplyInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReplyInfo");

  private static final org.apache.thrift.protocol.TField STUDENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("student_id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField POST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("post_id", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ReplyInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ReplyInfoTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable String student_id; // required
  public int post_id; // required
  public @org.apache.thrift.annotation.Nullable String content; // required
  public long date; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STUDENT_ID((short)1, "student_id"),
    POST_ID((short)2, "post_id"),
    CONTENT((short)3, "content"),
    DATE((short)4, "date");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STUDENT_ID
          return STUDENT_ID;
        case 2: // POST_ID
          return POST_ID;
        case 3: // CONTENT
          return CONTENT;
        case 4: // DATE
          return DATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __POST_ID_ISSET_ID = 0;
  private static final int __DATE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STUDENT_ID, new org.apache.thrift.meta_data.FieldMetaData("student_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POST_ID, new org.apache.thrift.meta_data.FieldMetaData("post_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReplyInfo.class, metaDataMap);
  }

  public ReplyInfo() {
  }

  public ReplyInfo(
    String student_id,
    int post_id,
    String content,
    long date)
  {
    this();
    this.student_id = student_id;
    this.post_id = post_id;
    setPost_idIsSet(true);
    this.content = content;
    this.date = date;
    setDateIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReplyInfo(ReplyInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetStudent_id()) {
      this.student_id = other.student_id;
    }
    this.post_id = other.post_id;
    if (other.isSetContent()) {
      this.content = other.content;
    }
    this.date = other.date;
  }

  @Override
  public ReplyInfo deepCopy() {
    return new ReplyInfo(this);
  }

  @Override
  public void clear() {
    this.student_id = null;
    setPost_idIsSet(false);
    this.post_id = 0;
    this.content = null;
    setDateIsSet(false);
    this.date = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public String getStudent_id() {
    return this.student_id;
  }

  public ReplyInfo setStudent_id(@org.apache.thrift.annotation.Nullable String student_id) {
    this.student_id = student_id;
    return this;
  }

  public void unsetStudent_id() {
    this.student_id = null;
  }

  /** Returns true if field student_id is set (has been assigned a value) and false otherwise */
  public boolean isSetStudent_id() {
    return this.student_id != null;
  }

  public void setStudent_idIsSet(boolean value) {
    if (!value) {
      this.student_id = null;
    }
  }

  public int getPost_id() {
    return this.post_id;
  }

  public ReplyInfo setPost_id(int post_id) {
    this.post_id = post_id;
    setPost_idIsSet(true);
    return this;
  }

  public void unsetPost_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POST_ID_ISSET_ID);
  }

  /** Returns true if field post_id is set (has been assigned a value) and false otherwise */
  public boolean isSetPost_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POST_ID_ISSET_ID);
  }

  public void setPost_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POST_ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public String getContent() {
    return this.content;
  }

  public ReplyInfo setContent(@org.apache.thrift.annotation.Nullable String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public long getDate() {
    return this.date;
  }

  public ReplyInfo setDate(long date) {
    this.date = date;
    setDateIsSet(true);
    return this;
  }

  public void unsetDate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DATE_ISSET_ID);
  }

  /** Returns true if field date is set (has been assigned a value) and false otherwise */
  public boolean isSetDate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DATE_ISSET_ID);
  }

  public void setDateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DATE_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case STUDENT_ID:
      if (value == null) {
        unsetStudent_id();
      } else {
        setStudent_id((String)value);
      }
      break;

    case POST_ID:
      if (value == null) {
        unsetPost_id();
      } else {
        setPost_id((Integer)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case DATE:
      if (value == null) {
        unsetDate();
      } else {
        setDate((Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STUDENT_ID:
      return getStudent_id();

    case POST_ID:
      return getPost_id();

    case CONTENT:
      return getContent();

    case DATE:
      return getDate();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STUDENT_ID:
      return isSetStudent_id();
    case POST_ID:
      return isSetPost_id();
    case CONTENT:
      return isSetContent();
    case DATE:
      return isSetDate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that instanceof ReplyInfo)
      return this.equals((ReplyInfo)that);
    return false;
  }

  public boolean equals(ReplyInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_student_id = true && this.isSetStudent_id();
    boolean that_present_student_id = true && that.isSetStudent_id();
    if (this_present_student_id || that_present_student_id) {
      if (!(this_present_student_id && that_present_student_id))
        return false;
      if (!this.student_id.equals(that.student_id))
        return false;
    }

    boolean this_present_post_id = true;
    boolean that_present_post_id = true;
    if (this_present_post_id || that_present_post_id) {
      if (!(this_present_post_id && that_present_post_id))
        return false;
      if (this.post_id != that.post_id)
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_date = true;
    boolean that_present_date = true;
    if (this_present_date || that_present_date) {
      if (!(this_present_date && that_present_date))
        return false;
      if (this.date != that.date)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetStudent_id()) ? 131071 : 524287);
    if (isSetStudent_id())
      hashCode = hashCode * 8191 + student_id.hashCode();

    hashCode = hashCode * 8191 + post_id;

    hashCode = hashCode * 8191 + ((isSetContent()) ? 131071 : 524287);
    if (isSetContent())
      hashCode = hashCode * 8191 + content.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(date);

    return hashCode;
  }

  @Override
  public int compareTo(ReplyInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.compare(isSetStudent_id(), other.isSetStudent_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStudent_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.student_id, other.student_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetPost_id(), other.isSetPost_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPost_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.post_id, other.post_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetContent(), other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetDate(), other.isSetDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReplyInfo(");
    boolean first = true;

    sb.append("student_id:");
    if (this.student_id == null) {
      sb.append("null");
    } else {
      sb.append(this.student_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("post_id:");
    sb.append(this.post_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("date:");
    sb.append(this.date);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReplyInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public ReplyInfoStandardScheme getScheme() {
      return new ReplyInfoStandardScheme();
    }
  }

  private static class ReplyInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<ReplyInfo> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, ReplyInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STUDENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.student_id = iprot.readString();
              struct.setStudent_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // POST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.post_id = iprot.readI32();
              struct.setPost_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.date = iprot.readI64();
              struct.setDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, ReplyInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.student_id != null) {
        oprot.writeFieldBegin(STUDENT_ID_FIELD_DESC);
        oprot.writeString(struct.student_id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(POST_ID_FIELD_DESC);
      oprot.writeI32(struct.post_id);
      oprot.writeFieldEnd();
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeString(struct.content);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DATE_FIELD_DESC);
      oprot.writeI64(struct.date);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReplyInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public ReplyInfoTupleScheme getScheme() {
      return new ReplyInfoTupleScheme();
    }
  }

  private static class ReplyInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<ReplyInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReplyInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetStudent_id()) {
        optionals.set(0);
      }
      if (struct.isSetPost_id()) {
        optionals.set(1);
      }
      if (struct.isSetContent()) {
        optionals.set(2);
      }
      if (struct.isSetDate()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetStudent_id()) {
        oprot.writeString(struct.student_id);
      }
      if (struct.isSetPost_id()) {
        oprot.writeI32(struct.post_id);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetDate()) {
        oprot.writeI64(struct.date);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReplyInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.student_id = iprot.readString();
        struct.setStudent_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.post_id = iprot.readI32();
        struct.setPost_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(3)) {
        struct.date = iprot.readI64();
        struct.setDateIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

