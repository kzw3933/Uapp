#
# Autogenerated by Thrift Compiler (0.18.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class RegisterInfo(object):
    """
    Attributes:
     - student_id
     - username
     - email
     - password

    """


    def __init__(self, student_id=None, username=None, email=None, password=None,):
        self.student_id = student_id
        self.username = username
        self.email = email
        self.password = password

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.student_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.username = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RegisterInfo')
        if self.student_id is not None:
            oprot.writeFieldBegin('student_id', TType.STRING, 1)
            oprot.writeString(self.student_id.encode('utf-8') if sys.version_info[0] == 2 else self.student_id)
            oprot.writeFieldEnd()
        if self.username is not None:
            oprot.writeFieldBegin('username', TType.STRING, 2)
            oprot.writeString(self.username.encode('utf-8') if sys.version_info[0] == 2 else self.username)
            oprot.writeFieldEnd()
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 3)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 4)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LoginInfo(object):
    """
    Attributes:
     - student_id
     - password

    """


    def __init__(self, student_id=None, password=None,):
        self.student_id = student_id
        self.password = password

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.student_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LoginInfo')
        if self.student_id is not None:
            oprot.writeFieldBegin('student_id', TType.STRING, 1)
            oprot.writeString(self.student_id.encode('utf-8') if sys.version_info[0] == 2 else self.student_id)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 2)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PostInfo(object):
    """
    Attributes:
     - post_id
     - student_id
     - for_lost_item
     - item_image
     - image_name
     - item_type
     - item_position
     - status
     - lost_time
     - item_desc
     - date

    """


    def __init__(self, post_id=None, student_id=None, for_lost_item=None, item_image=None, image_name=None, item_type=None, item_position=None, status=None, lost_time=None, item_desc="", date=None,):
        self.post_id = post_id
        self.student_id = student_id
        self.for_lost_item = for_lost_item
        self.item_image = item_image
        self.image_name = image_name
        self.item_type = item_type
        self.item_position = item_position
        self.status = status
        self.lost_time = lost_time
        self.item_desc = item_desc
        self.date = date

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.post_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.student_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.for_lost_item = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.item_image = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.image_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.item_type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.item_position = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.status = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I64:
                    self.lost_time = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.item_desc = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I64:
                    self.date = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PostInfo')
        if self.post_id is not None:
            oprot.writeFieldBegin('post_id', TType.STRING, 1)
            oprot.writeString(self.post_id.encode('utf-8') if sys.version_info[0] == 2 else self.post_id)
            oprot.writeFieldEnd()
        if self.student_id is not None:
            oprot.writeFieldBegin('student_id', TType.STRING, 2)
            oprot.writeString(self.student_id.encode('utf-8') if sys.version_info[0] == 2 else self.student_id)
            oprot.writeFieldEnd()
        if self.for_lost_item is not None:
            oprot.writeFieldBegin('for_lost_item', TType.BOOL, 3)
            oprot.writeBool(self.for_lost_item)
            oprot.writeFieldEnd()
        if self.item_image is not None:
            oprot.writeFieldBegin('item_image', TType.STRING, 4)
            oprot.writeBinary(self.item_image)
            oprot.writeFieldEnd()
        if self.image_name is not None:
            oprot.writeFieldBegin('image_name', TType.STRING, 5)
            oprot.writeString(self.image_name.encode('utf-8') if sys.version_info[0] == 2 else self.image_name)
            oprot.writeFieldEnd()
        if self.item_type is not None:
            oprot.writeFieldBegin('item_type', TType.STRING, 6)
            oprot.writeString(self.item_type.encode('utf-8') if sys.version_info[0] == 2 else self.item_type)
            oprot.writeFieldEnd()
        if self.item_position is not None:
            oprot.writeFieldBegin('item_position', TType.STRING, 7)
            oprot.writeString(self.item_position.encode('utf-8') if sys.version_info[0] == 2 else self.item_position)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.BOOL, 8)
            oprot.writeBool(self.status)
            oprot.writeFieldEnd()
        if self.lost_time is not None:
            oprot.writeFieldBegin('lost_time', TType.I64, 9)
            oprot.writeI64(self.lost_time)
            oprot.writeFieldEnd()
        if self.item_desc is not None:
            oprot.writeFieldBegin('item_desc', TType.STRING, 10)
            oprot.writeString(self.item_desc.encode('utf-8') if sys.version_info[0] == 2 else self.item_desc)
            oprot.writeFieldEnd()
        if self.date is not None:
            oprot.writeFieldBegin('date', TType.I64, 11)
            oprot.writeI64(self.date)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ReplyInfo(object):
    """
    Attributes:
     - student_id
     - post_id
     - content
     - date

    """


    def __init__(self, student_id=None, post_id=None, content=None, date=None,):
        self.student_id = student_id
        self.post_id = post_id
        self.content = content
        self.date = date

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.student_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.post_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.content = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.date = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ReplyInfo')
        if self.student_id is not None:
            oprot.writeFieldBegin('student_id', TType.STRING, 1)
            oprot.writeString(self.student_id.encode('utf-8') if sys.version_info[0] == 2 else self.student_id)
            oprot.writeFieldEnd()
        if self.post_id is not None:
            oprot.writeFieldBegin('post_id', TType.I32, 2)
            oprot.writeI32(self.post_id)
            oprot.writeFieldEnd()
        if self.content is not None:
            oprot.writeFieldBegin('content', TType.STRING, 3)
            oprot.writeString(self.content.encode('utf-8') if sys.version_info[0] == 2 else self.content)
            oprot.writeFieldEnd()
        if self.date is not None:
            oprot.writeFieldBegin('date', TType.I64, 4)
            oprot.writeI64(self.date)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(RegisterInfo)
RegisterInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'student_id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'username', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'email', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'password', 'UTF8', None, ),  # 4
)
all_structs.append(LoginInfo)
LoginInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'student_id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'password', 'UTF8', None, ),  # 2
)
all_structs.append(PostInfo)
PostInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'post_id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'student_id', 'UTF8', None, ),  # 2
    (3, TType.BOOL, 'for_lost_item', None, None, ),  # 3
    (4, TType.STRING, 'item_image', 'BINARY', None, ),  # 4
    (5, TType.STRING, 'image_name', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'item_type', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'item_position', 'UTF8', None, ),  # 7
    (8, TType.BOOL, 'status', None, None, ),  # 8
    (9, TType.I64, 'lost_time', None, None, ),  # 9
    (10, TType.STRING, 'item_desc', 'UTF8', "", ),  # 10
    (11, TType.I64, 'date', None, None, ),  # 11
)
all_structs.append(ReplyInfo)
ReplyInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'student_id', 'UTF8', None, ),  # 1
    (2, TType.I32, 'post_id', None, None, ),  # 2
    (3, TType.STRING, 'content', 'UTF8', None, ),  # 3
    (4, TType.I64, 'date', None, None, ),  # 4
)
fix_spec(all_structs)
del all_structs
